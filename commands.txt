git init - инициализация гита, начало работы(создание локального репозитория)

первоначальноя настройка гита (если в проекте нужно другое имя/почта, без --global)
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

git status - показывает статус
git add .  - добавить всё в отслеживание 
git add file - добавить file в отслеживание 
git commit -m 'massage' - комит (фиксация версии проекта)
git diff - отслеживание недобавленных в отслеживание файлов
git diff --staged - отслеживание добавленных в отслеживание файлов

.gitignore -файл, в который построчо добавляем название файлов, отслеживать которые не нужно




git remote add origin https://github.com/IvanShulga72/gitproject.git - добавить о отслеживание удаленный репозиторий и указываем адрес (связь между локальным и удалённым репозиторием)
git branch -M main - название ветки main
git push -u origin main - загружает локальный репозиторий на удаленный


git remote - вывести название удаленного реипозитория
git remote show origin - детали удаленного реипозитория
git config --list -  детали удаленного реипозитория
git push - 

mv namefile namedir/ - переместить файл namefile в папку namedir

git clone url - клонирование репозитория в папку и создание в ней папки с названием репозитория, где внутри будут файлы
git clone url . - клонирование репозитория в папку без создание в ней папки с названием репозитория, где внутри будут файлы (клонирование только файлов внутри репозитория) (клонировать внутренности репозитория внутрь текущей папки)
git pull - скачивание всех последних изменений с удаленного реипозитория



git log - выводит все комиты
git log file - выводит все комиты, где изменялся file
git log -n - выводит последние n комитов
git log -3 -p - выводит последние 3 комита, с указанием изменений в них(-p == --patch)
git log -3 -p --stat - выводит последние 3 комита, с указанием изменений в них + результат изменений
git log --pretty=oneline - удобный вывод (в одну строку)
git log --pretty=short - удобный вывод (кратко)
git log --pretty=full - удобный вывод (в одну строку)
git log --pretty=fuller - удобный вывод (в одну строку)
git log --graph - вывод комитов с ветками
git show 1f17e24c4a2dc1533733973ee2aaf9d0ce194e22 - показывает комит по номеру

git checkout file - откат неотслеживаемых файлов до последнего комита
git restore --staged file - откат отслеживаемых файлов до последнего комита
git checkout main(master) - вернуться в ветку мастер
git revert 1f17e24c4a2dc1533733973ee2aaf9d0ce194e22 - (удалить комит) создание нового комита обратного к старому
git commit --amend -m "" - добавление к последнему комиту отслеживаемые изменения(вместо создания нового)
git commit --amend -m "new massage" - изменить комментарий в последнем комите

git reset 1f17e24c --mixed(по умолчанию) - откат до этого комита, все изменения возвращаются как не добавленные в отслеживание
git reset 1f17e24c --soft - откат до этого комита, все изменения возвращаются как добавленные в отслеживание
git reset 1f17e24c --hard - откат до этого комита, все изменения после удаляются
git reset --hard origin/master - всё на локальном откатится до состояния на удаленном реипозитории


git rm namefie - удаление как из папки, так и из отслеживания
git rm namefie --cached - удаление только и из отслеживания гит





git branch - список веток в проекте
git branch namebranch - создание новой ветки в проекте
git branch -v - список веток в проекте и последних коммитов в них
git branch -vv - список веток в проекте, последний коммит и связь с удалённым репозиторием
git branch -m newnamebranch - новое название для текущей ветки
git branch -d namebranch - удаление ветки, безопасное
git branch -D namebranch - удаление ветки, принудительно
git branch --merged - какие ветки вмерджины в текущую
git branch --no-merged - какие ветки невмерджины в текущую
git merge namebranch - объединение ветки namebranch с текущей




git merge --no-ff namebranch - объединение ветки namebranch с текущей 3-x сторонним слиянием, а не fast forword
git checkout -b namebranch - создаёт и переходит в новую ветку
git diff - выводит конфликтное место
git log --merge - выводит коммиты для которых происходит слияние в данный момент
git merge --abort - остановить слияние и вернуться к моменту до слияния

git merge -X ours namebranch - делает слияние и при возникновении конфликта использует изменения текушей ветки
git merge -X theirs namebranch - делает слияние и при возникновении конфликта использует изменения сливаемой ветки

git checkout --ours namefile - в текущей конфликтной ситуации использует изменения текущей ветки (можно указать точку вместо названия файла)
git checkout --theirs namefile - в текущей конфликтной ситуации использует изменения сливаемой ветки (можно указать точку вместо названия файла)





git push -u origin namebranch(или HEAD) - создание удаленной ветки
git push  origin --delete namebranch - удаление удаленной ветки

git rebase - перебазирование истории, сначала с другой ветки, потом с этой
git rebase -i - интрактивное перебазирование истории (можно объединить несколько коммитов в один)
git pull -- rebase origin namebranch - перебазирование удалённой ветки


git tag - выводит список тегов
git tag nametag - создаёт тег
git show nametag - показывает информацию по тегу